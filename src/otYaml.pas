unit otYaml;

{$MODE Delphi}

{ Header translation for LibYaml (https://github.com/yaml/libyaml).
  This unit is partially generated by Chet (https://github.com/neslib/Chet). }

{$MINENUMSIZE 4}
interface

uses
  otStack;


(**
 * @defgroup basic Basic Types
 * @{
 *)

(** The version directive data. *)
type
  TYamlVersionDirective = record
    (** The major version number. *)
    Major: Integer;
    (** The minor version number. *)
    Minor: Integer;

    { Initializes a version.

      Parameters:
        AMajor: Major version number. 0 if not specified.
        AMinor: Minor version number. 0 if not specified. }
    procedure Initialize(const AMajor: Integer = 0; const AMinor: Integer = 0); inline;
    class function Create(const AMajor: Integer = 0;
      const AMinor: Integer = 0): TYamlVersionDirective; static;
  end;

(** The tag directive data. *)
type
  TYamlTagDirective = record
    (** The tag handle. *)
    Handle: String;
    (** The tag prefix. *)
    Prefix: String;

    class function Build(AHandle, APrefix: String): TYamlTagDirective; static;
  end;
  TYamlTagDirectives = TArray<TYamlTagDirective>;


(** The stream encoding. *)
type
  TYamlEncoding = (
    (** Let the parser choose the encoding. *)
    yencAnyEncoding,
    (** The default UTF-8 encoding. *)
    yencUTF8,
    (** The UTF-16-LE encoding with BOM. *)
    yencUTF16LE,
    (** The UTF-16-BE encoding with BOM. *)
    yencUTF16BE);

(** Line break types. *)
type
  TYamlBreak = (
    (** Let the parser choose the break type. *)
    ybrkAnyBreak,
    (** Use CR for line breaks (Mac style). *)
    ybrkCR,
    (** Use LN for line breaks (Unix style). *)
    ybrkLN,
    (** Use CR LN for line breaks (DOS style). *)
    ybrkCRLN);

(** The pointer position. *)
type
  TYamlMark = record
    (** The position index. *)
    Index: NativeInt;

    (** The position line. *)
    Line: NativeInt;

    (** The position column. *)
    Column: NativeInt;

    procedure Initialize(const AIndex: Integer = 0; const ALine: Integer = 0; const AColumn: Integer = 0);
  end;

(**
 * @defgroup styles Node Styles
 * @{
 *)
type
   TYamlScalarFlag = (
    { Is set if the node tag may be omitted whenever the scalar value is
      presented in the Plain style. }
    ysfPlainImplicit,

    { Is set if the node tag may be omitted whenever the scalar value is
      presented in any non-Plain style. }
    ysfQuotedImplicit);
  TYamlScalarFlags = set of TYamlScalarFlag;


(** Scalar styles. *)
type
  TYamlScalarStyle = (
    (** Let the emitter choose the style. *)
    yssAnyStyle,

    (** The plain scalar style. *)
    yssPlainScalar,

    (** The single-quoted scalar style. *)
    yssSingleQuotedScalar,
    (** The double-quoted scalar style. *)
    yssDoubleQuotedScalar,

    (** The literal scalar style. *)
    yssLiteralScalar,
    (** The folded scalar style. *)
    yssFoldedScalar);

(** Sequence styles. *)
type
  TYamlSequenceStyle = (
    (** Let the emitter choose the style. *)
    ysqAnyStyle,

    (** The block sequence style. *)
    ysqBlockSequence,
    (** The flow sequence style. *)
    ysqFlowSequence);

(** Mapping styles. *)
type
  TYamlMappingStyle = (
    (** Let the emitter choose the style. *)
    ympAnyStyle,

    (** The block mapping style. *)
    ympBlockMapping,
    (** The flow mapping style. *)
    ympFlowMapping);

(**
 * @defgroup tokens Tokens
 * @{
 *)

(** Token types. *)
type
  TYamlTokenType = (
    (** An empty token. *)
    ytkNoToken,

    (** A STREAM-START token. *)
    ytkStreamStart,
    (** A STREAM-END token. *)
    ytkStreamEnd,

    (** A VERSION-DIRECTIVE token. *)
    ytkVersionDirective,
    (** A TAG-DIRECTIVE token. *)
    ytkTagDirective,
    (** A DOCUMENT-START token. *)
    ytkDocumentStart,
    (** A DOCUMENT-END token. *)
    ytkDocumentEnd,

    (** A BLOCK-SEQUENCE-START token. *)
    ytkBlockSequenceStart,
    (** A BLOCK-MAPPING-START token. *)
    ytkBlockMappingStart,
    (** A BLOCK-END token. *)
    ytkBlockEnd,

    (** A FLOW-SEQUENCE-START token. *)
    ytkFlowSequenceStart,
    (** A FLOW-SEQUENCE-END token. *)
    ytkFlowSequenceEnd,
    (** A FLOW-MAPPING-START token. *)
    ytkFlowMappingStart,
    (** A FLOW-MAPPING-END token. *)
    ytkFlowMappingEnd,

    (** A BLOCK-ENTRY token. *)
    ytkBlockEntry,
    (** A FLOW-ENTRY token. *)
    ytkFlowEntry,
    (** A KEY token. *)
    ytkKey,
    (** A VALUE token. *)
    ytkValue,

    (** An ALIAS token. *)
    ytkAlias,
    (** An ANCHOR token. *)
    ytkAnchor,
    (** A TAG token. *)
    ytkTag,
    (** A SCALAR token. *)
    ytkScalar);

(**
 * @defgroup events Events
 * @{
 *)

(** Event types. *)
type
  TYamlEventType = (
    (** An empty event. *)
    YAML_NO_EVENT,

    (** A STREAM-START event. *)
    YAML_STREAM_START_EVENT,
    (** A STREAM-END event. *)
    YAML_STREAM_END_EVENT,

    (** A DOCUMENT-START event. *)
    YAML_DOCUMENT_START_EVENT,
    (** A DOCUMENT-END event. *)
    YAML_DOCUMENT_END_EVENT,

    (** An ALIAS event. *)
    YAML_ALIAS_EVENT,
    (** A SCALAR event. *)
    YAML_SCALAR_EVENT,

    (** A SEQUENCE-START event. *)
    YAML_SEQUENCE_START_EVENT,
    (** A SEQUENCE-END event. *)
    YAML_SEQUENCE_END_EVENT,

    (** A MAPPING-START event. *)
    YAML_MAPPING_START_EVENT,
    (** A MAPPING-END event. *)
    YAML_MAPPING_END_EVENT);

(**
 * @defgroup nodes Nodes
 * @{
 *)

const
  (** The tag @c !!null with the only possible value: @c null. *)
  YAML_NULL_TAG = 'tag:yaml.org,2002:null';
  (** The tag @c !!bool with the values: @c true and @c false. *)
  YAML_BOOL_TAG = 'tag:yaml.org,2002:bool';
  (** The tag @c !!str for string values. *)
  YAML_STR_TAG = 'tag:yaml.org,2002:str';
  (** The tag @c !!int for integer values. *)
  YAML_INT_TAG = 'tag:yaml.org,2002:int';
  (** The tag @c !!float for float values. *)
  YAML_FLOAT_TAG = 'tag:yaml.org,2002:float';
  (** The tag @c !!timestamp for date and time values. *)
  YAML_TIMESTAMP_TAG = 'tag:yaml.org,2002:timestamp';

  (** The tag @c !!seq is used to denote sequences. *)
  YAML_SEQ_TAG = 'tag:yaml.org,2002:seq';
  (** The tag @c !!map is used to denote mapping. *)
  YAML_MAP_TAG = 'tag:yaml.org,2002:map';

  (** The default scalar tag is @c !!str. *)
  YAML_DEFAULT_SCALAR_TAG = YAML_STR_TAG;
  (** The default sequence tag is @c !!seq. *)
  YAML_DEFAULT_SEQUENCE_TAG = YAML_SEQ_TAG;
  (** The default mapping tag is @c !!map. *)
  YAML_DEFAULT_MAPPING_TAG = YAML_MAP_TAG;

(**
 * This structure holds information about a potential simple key.
 *)
type
  TYamlSimpleKey = class
    public
    (** Is a simple key possible? *)
    FPossible: Boolean;

    (** Is a simple key required? *)
    FRequired: Boolean;

    (** The number of the token. *)
    FTokenNumber: NativeInt;

    (** The position mark. *)
    FMark: TYamlMark;


    constructor Create;
  end;

(**
 * The states of the parser.
 *)
type
  TYamlParserState = (
    (** Expect STREAM-START. *)
    YAML_PARSE_STREAM_START_STATE,
    (** Expect the beginning of an implicit document. *)
    YAML_PARSE_IMPLICIT_DOCUMENT_START_STATE,
    (** Expect DOCUMENT-START. *)
    YAML_PARSE_DOCUMENT_START_STATE,
    (** Expect the content of a document. *)
    YAML_PARSE_DOCUMENT_CONTENT_STATE,
    (** Expect DOCUMENT-END. *)
    YAML_PARSE_DOCUMENT_END_STATE,
    (** Expect a block node. *)
    YAML_PARSE_BLOCK_NODE_STATE,
    (** Expect a block node or indentless sequence. *)
    YAML_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE,
    (** Expect a flow node. *)
    YAML_PARSE_FLOW_NODE_STATE,
    (** Expect the first entry of a block sequence. *)
    YAML_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE,
    (** Expect an entry of a block sequence. *)
    YAML_PARSE_BLOCK_SEQUENCE_ENTRY_STATE,
    (** Expect an entry of an indentless sequence. *)
    YAML_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE,
    (** Expect the first key of a block mapping. *)
    YAML_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE,
    (** Expect a block mapping key. *)
    YAML_PARSE_BLOCK_MAPPING_KEY_STATE,
    (** Expect a block mapping value. *)
    YAML_PARSE_BLOCK_MAPPING_VALUE_STATE,
    (** Expect the first entry of a flow sequence. *)
    YAML_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE,
    (** Expect an entry of a flow sequence. *)
    YAML_PARSE_FLOW_SEQUENCE_ENTRY_STATE,
    (** Expect a key of an ordered mapping. *)
    YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE,
    (** Expect a value of an ordered mapping. *)
    YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE,
    (** Expect the and of an ordered mapping entry. *)
    YAML_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE,
    (** Expect the first key of a flow mapping. *)
    YAML_PARSE_FLOW_MAPPING_FIRST_KEY_STATE,
    (** Expect a key of a flow mapping. *)
    YAML_PARSE_FLOW_MAPPING_KEY_STATE,
    (** Expect a value of a flow mapping. *)
    YAML_PARSE_FLOW_MAPPING_VALUE_STATE,
    (** Expect an empty value of a flow mapping. *)
    YAML_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE,
    (** Expect nothing. *)
    YAML_PARSE_END_STATE);
  Pyaml_parser_state_t = ^TYamlParserState;

(**
 * @defgroup emitter Emitter Definitions
 * @{
 *)

(** The emitter states. *)
type
  TYamlEmitterState = (
    (** Expect STREAM-START. *)
    YAML_EMIT_STREAM_START_STATE,
    (** Expect the first DOCUMENT-START or STREAM-END. *)
    YAML_EMIT_FIRST_DOCUMENT_START_STATE,
    (** Expect DOCUMENT-START or STREAM-END. *)
    YAML_EMIT_DOCUMENT_START_STATE,
    (** Expect the content of a document. *)
    YAML_EMIT_DOCUMENT_CONTENT_STATE,
    (** Expect DOCUMENT-END. *)
    YAML_EMIT_DOCUMENT_END_STATE,
    (** Expect the first item of a flow sequence. *)
    YAML_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE,
    (** Expect an item of a flow sequence. *)
    YAML_EMIT_FLOW_SEQUENCE_ITEM_STATE,
    (** Expect the first key of a flow mapping. *)
    YAML_EMIT_FLOW_MAPPING_FIRST_KEY_STATE,
    (** Expect a key of a flow mapping. *)
    YAML_EMIT_FLOW_MAPPING_KEY_STATE,
    (** Expect a value for a simple key of a flow mapping. *)
    YAML_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE,
    (** Expect a value of a flow mapping. *)
    YAML_EMIT_FLOW_MAPPING_VALUE_STATE,
    (** Expect the first item of a block sequence. *)
    YAML_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE,
    (** Expect an item of a block sequence. *)
    YAML_EMIT_BLOCK_SEQUENCE_ITEM_STATE,
    (** Expect the first key of a block mapping. *)
    YAML_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE,
    (** Expect the key of a block mapping. *)
    YAML_EMIT_BLOCK_MAPPING_KEY_STATE,
    (** Expect a value for a simple key of a block mapping. *)
    YAML_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE,
    (** Expect a value of a block mapping. *)
    YAML_EMIT_BLOCK_MAPPING_VALUE_STATE,
    (** Expect nothing. *)
    YAML_EMIT_END_STATE);


implementation

procedure TYamlMark.Initialize(const AIndex: Integer = 0; const ALine: Integer = 0; const AColumn: Integer = 0);
begin
  Index := AIndex;
  Line := ALine;
  Column := AColumn;
end;

procedure TYamlVersionDirective.Initialize(const AMajor: Integer = 0; const AMinor: Integer = 0);
begin
  Major := AMajor;
  Minor := AMinor;
end;

class function TYamlVersionDirective.Create(const AMajor: Integer = 0;
  const AMinor: Integer = 0): TYamlVersionDirective; static;
begin
  Result.Initialize(AMajor, AMinor);
end;

class function TYamlTagDirective.Build(AHandle, APrefix: String): TYamlTagDirective;
begin
  Result.Handle := AHandle;
  Result.Prefix := APrefix;
end;


constructor TYamlSimpleKey.Create;
begin
  FPossible := false;
  FRequired := false;
  FTokenNumber := 0;
  FMark.Index := 0;;
  FMark.Line := 0;
  FMark.Column := 0;
end;

end.
